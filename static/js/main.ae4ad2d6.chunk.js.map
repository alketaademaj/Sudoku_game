{"version":3,"sources":["components/NumberBox.js","components/NineBox.js","components/CompleteBox.jsx","components/ChangeNumber.jsx","components/SelectNumber.jsx","App.js","reportWebVitals.js","index.js"],"names":["NumberBox","props","rowCheck","console","log","row","columnCheck","blockCheck","createBlockBox","initialvalue","column","selected","toString","state","address","color","this","className","style","backgroundColor","onClick","passingValue","numbValue","Component","NineBox","map","ind","val","CompleteBox","x","push","changeSelected","ChangeNumber","tempCopy","value","setnumbValue","SelectNumber","Array","i","App","useState","numbvalue","setSelected","keyChange","event","key","parseInt","temp","useEffect","document","addEventListener","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wPAsFeA,EAnFf,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAsCRC,SAAW,WAETC,QAAQC,IAAI,EAAKH,MAAMI,MAzCN,EA4CnBC,YAAc,WACZH,QAAQC,IAAI,WA7CK,EAgDnBG,WAAa,WACXJ,QAAQC,IAAI,UAjDK,EAoDnBI,eAAiB,WACf,OAAwE,OAApE,EAAKP,MAAMQ,aAA8B,EAAjB,EAAKR,MAAMI,IAAU,EAAKJ,MAAMS,QAEnD,gBAEA,EAAKT,MAAMU,SAASC,aAAe,CAAC,EAAKX,MAAMI,IAAK,EAAKJ,MAAMS,QAAQE,WACvE,2BAGA,QA1DT,EAAKC,MAAQ,CACXC,QAAS,CAAC,EAAKb,MAAMI,IAAK,EAAKJ,MAAMS,QACrCC,SAAU,EAAKV,MAAMU,SACrBI,MAAO,IANQ,EADrB,iEAqCIC,KAAKd,aArCT,+BAkEY,IAAD,OAOP,OACE,qBAAKe,UAAU,SAAf,SACE,qBACEA,UAAWD,KAAKR,iBAAkBU,MAAO,CAAEC,gBAAiBH,KAAKH,MAAME,OAASK,QAAS,kBAAM,EAAKnB,MAAMoB,aAAa,EAAKpB,MAAMI,IAAK,EAAKJ,MAAMS,SADpJ,SAEGM,KAAKf,MAAMqB,UAA2B,EAAjBN,KAAKf,MAAMI,IAAUW,KAAKf,MAAMS,gBA7EhE,GAA+Ba,aCsBhBC,EAtBf,uKAEc,IAAD,OAIL,OACI,qBAAKP,UAAU,UAAf,SAHW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAKxBQ,KAAI,SAACC,EAAKC,GACd,OAAY,IAARD,GAAqB,IAARA,EACN,sBAAeT,UAAU,iBAAzB,UAA2C,cAAC,EAAD,CAAWP,OAAQgB,EAAKL,aAAc,EAAKpB,MAAMoB,aAAchB,IAAK,EAAKJ,MAAMI,IAAKM,SAAU,EAAKV,MAAMU,SAAUF,aAAc,EAAKR,MAAMQ,aAAca,UAAW,EAAKrB,MAAMqB,YAA3N,IAAyO,qBAAKL,UAAU,WAAf,iBAA/NS,GAGV,cAAC,EAAD,CAAqBhB,OAAQgB,EAAKjB,aAAc,EAAKR,MAAMQ,aAAcY,aAAc,EAAKpB,MAAMoB,aAAchB,IAAK,EAAKJ,MAAMI,IAAKM,SAAU,EAAKV,MAAMU,SAAUW,UAAW,EAAKrB,MAAMqB,WAA1KI,YAd/C,GAA6BH,aCyBdK,EAzBf,uKAII,IAFA,IAAMvB,EAAM,GAEHwB,EAAI,EAAGA,GAAK,EAAGA,IACtBxB,EAAIyB,KACF,cAAC,EAAD,CAEEzB,IAAKwB,EACLR,aAAcL,KAAKf,MAAM8B,eACzBpB,SAAUK,KAAKf,MAAMU,SACrBW,UAAWN,KAAKf,MAAMqB,UACtBb,aAAcO,KAAKf,MAAMQ,cALpBoB,IAUX,OACE,8BACE,qBAAKZ,UAAU,WAAf,SAA2BZ,UAnBnC,GAAiCkB,aCoBlBS,MArBf,SAAsB/B,GAYpB,OACE,8BACE,qBAAKgB,UAAU,WAAWG,QAbT,WACnB,GACoE,OAAlEnB,EAAMQ,aAAiC,EAApBR,EAAMU,SAAS,GAASV,EAAMU,SAAS,IAC1D,CAEA,IAAMsB,EAAQ,YAAOhC,EAAMqB,WAC3BW,EAA6B,EAApBhC,EAAMU,SAAS,GAASV,EAAMU,SAAS,IAAMV,EAAMiC,MAC5DjC,EAAMkC,aAAaF,KAMnB,SACGhC,EAAMiC,WCOAE,EAnBf,uKACY,IAAD,OACP,OACE,qBAAKnB,UAAU,YAAf,SACG,YAAIoB,MAAM,IAAIZ,KAAI,SAACI,EAAGS,GAAJ,OACjB,cAAC,EAAD,CAEEJ,MAAOI,EAAI,EACXhB,UAAW,EAAKrB,MAAMqB,UACtBa,aAAc,EAAKlC,MAAMkC,aACzBxB,SAAU,EAAKV,MAAMU,SACrBF,aAAc,EAAKR,MAAMQ,cALpB6B,YANjB,GAAkCf,aCqEnBgB,MApEf,WAAgB,IAAD,EAE2BC,mBAAS,CAAC,IAAK,IAAK,KAAM,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,IAAK,IAAK,KAAM,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,KAAM,KAAM,IAAK,KAAM,KAAM,KAAM,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,KAAM,KAAM,IAAK,IAAK,KAAM,KAAM,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,IAAK,KAAM,KAAM,KAAM,IAAK,OAFle,mBAEN/B,EAFM,aAGqB+B,mBAAS,CAAC,IAAK,IAAK,KAAM,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,IAAK,IAAK,KAAM,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,KAAM,KAAM,IAAK,KAAM,KAAM,KAAM,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,KAAM,KAAM,IAAK,IAAK,KAAM,KAAM,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,IAAK,KAAM,KAAM,KAAM,IAAK,QAH5d,mBAGNC,EAHM,KAGKN,EAHL,OAImBK,mBAASH,MAAM,IAJlC,mBAIN1B,EAJM,KAII+B,EAJJ,KAcPC,EAAY,SAACC,GAGjB,GAAkB,cAAdA,EAAMC,IACJlC,EAAS,GAAK,GAChB+B,EAAY,CAAC/B,EAAS,GAAIA,EAAS,GAAK,SAGvC,GAAkB,eAAdiC,EAAMC,IACTlC,EAAS,GAAK,GAChB+B,EAAY,CAAC/B,EAAS,GAAIA,EAAS,GAAK,SAGvC,GAAkB,YAAdiC,EAAMC,IACTlC,EAAS,GAAK,GAChB+B,EAAY,CAAC/B,EAAS,GAAK,EAAGA,EAAS,UAGtC,GAAkB,cAAdiC,EAAMC,IACTlC,EAAS,GAAK,GAChB+B,EAAY,CAAC/B,EAAS,GAAK,EAAGA,EAAS,UAGtC,GAAImC,SAASF,EAAMC,KAAO,GAAKC,SAASF,EAAMC,KAAO,KACxD1C,QAAQC,IAAIwC,EAAMC,KACkC,OAAhDpC,EAA2B,EAAdE,EAAS,GAASA,EAAS,KAAc,CACxD,IAAMoC,EAAI,YAAON,GACjBM,EAAmB,EAAdpC,EAAS,GAASA,EAAS,IAAMiC,EAAMC,IAC5CV,EAAaY,KAanB,OARAC,qBAAU,WAGR,OAFAC,SAASC,iBAAiB,UAAWP,GAE9B,WACLM,SAASE,oBAAoB,UAAWR,MAEzC,CAAChC,IAGF,sBAAKM,UAAU,MAAf,UACE,wCACA,qBAAKA,UAAU,cAAf,SACE,cAAC,EAAD,CAAaK,UAAWmB,EAAWhC,aAAcA,EAAcE,SAAUA,EAAUoB,eAlDzE,SAAC1B,EAAKK,GACpBgC,EAAY,CAACrC,EAAKK,SAmDhB,qBAAKO,UAAU,cAAf,SACE,cAAC,EAAD,CAAcK,UAAWmB,EAAW9B,SAAUA,EAAUwB,aAAcA,EAAc1B,aAAcA,UCxD3F2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFd,SAASe,eAAe,SAM1BZ,M","file":"static/js/main.ae4ad2d6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nexport class NumberBox extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      address: [this.props.row, this.props.column],\r\n      selected: this.props.selected,\r\n      color: '',\r\n    };\r\n  }\r\n  //--> whenever the state or props update, the component rerenders \r\n\r\n  //  componentDidUpdate(prevProps) { //this.state without a condition -> goes to infinite loop\r\n  //    if (prevProps.selected !== this.props.selected) { //what the value of selected was before this one\r\n  //       console.log(this.props.selected.toString(),this.state.address.toString())\r\n  //      if (this.props.selected.toString() === this.state.address.toString()) {\r\n  //        this.setState({ color: 'rgb(43, 134, 161)' })\r\n  //          console.log(\"blue color set for \", this.state.address)\r\n  //       }\r\n  //       else {\r\n  //         this.setState({ color: 'rgb(147, 194, 216)' })\r\n  //          console.log(\"pink color set for \", this.state.address)\r\n  //      }\r\n  //      this.setState({ selected: this.props.selected });\r\n  //    }\r\n  //   };\r\n  //initialvalue={this.props.initialvalue}\r\n\r\n  //------------------------------------------------------------------------------------------------------->\r\n  //checking if the sudoku is filled correctly comes here\r\n\r\n  // no element in array that is repeated\r\n  // three different functions\r\n  // which row, which column, which block\r\n  // return the array relating to that row, column, block\r\n\r\n  componentDidUpdate() {\r\n    this.rowCheck();\r\n  }\r\n\r\n  rowCheck = () => {\r\n    //slice, get the exact junk from the array, helps you get a row \r\n    console.log(this.props.row)\r\n  }\r\n\r\n  columnCheck = () => {\r\n    console.log(\"column\")\r\n  }\r\n\r\n  blockCheck = () => {\r\n    console.log(\"block\")\r\n  }\r\n\r\n  createBlockBox = () => {\r\n    if (this.props.initialvalue[this.props.row * 9 + this.props.column] !== null) {\r\n      //add two classes\r\n      return \"aBox blockBox\"\r\n    }\r\n    else if (this.props.selected.toString() === [this.props.row, this.props.column].toString()) {\r\n      return \"aBox currentBox blockBox\"\r\n    }\r\n    else {\r\n      return \"aBox\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // console.log(this.props.selected)\r\n    // console.log(this.state.address, this.props.selected, this.props.selected.toString(), this.state.address.toString())\r\n    //console.log(this.props.selected.toString(), this.state.address.toString())\r\n\r\n    //{this.props.numbValue}\r\n\r\n    return (\r\n      <div className=\"allBox\">\r\n        <div\r\n          className={this.createBlockBox()} style={{ backgroundColor: this.state.color }} onClick={() => this.props.passingValue(this.props.row, this.props.column)} >\r\n          {this.props.numbValue[this.props.row * 9 + this.props.column]}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default NumberBox\r\n","import React, { Component } from 'react'\r\nimport NumberBox from './NumberBox' //same file reference can you hear me?\r\n\r\nexport class NineBox extends Component {\r\n\r\n    render() {\r\n\r\n        const column = [0, 1, 2, 3, 4, 5, 6, 7, 8]\r\n\r\n        return (\r\n            <div className=\"nineBox\">\r\n\r\n                {column.map((ind, val) => {\r\n                    if (ind === 3 || ind === 6) {\r\n                        return <div key={ind} className=\"dummyDivParent\" ><NumberBox column={ind} passingValue={this.props.passingValue} row={this.props.row} selected={this.props.selected} initialvalue={this.props.initialvalue} numbValue={this.props.numbValue} /> <div className=\"dummyDiv\"> </div></div>\r\n                    }\r\n                    else {\r\n                        return <NumberBox key={ind} column={ind} initialvalue={this.props.initialvalue} passingValue={this.props.passingValue} row={this.props.row} selected={this.props.selected} numbValue={this.props.numbValue} />\r\n                    }\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NineBox\r\n","import React, { Component } from \"react\";\r\nimport NineBox from \"./NineBox\";\r\n\r\nexport class CompleteBox extends Component {\r\n  render() {\r\n    const row = [];\r\n\r\n    for (let x = 0; x <= 8; x++) {\r\n      row.push(\r\n        <NineBox\r\n          key={x}\r\n          row={x}\r\n          passingValue={this.props.changeSelected}\r\n          selected={this.props.selected}\r\n          numbValue={this.props.numbValue}\r\n          initialvalue={this.props.initialvalue}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"complete\">{row}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CompleteBox;\r\n","import React from \"react\";\r\n\r\nfunction ChangeNumber(props) {\r\n  const sudokuChange = () => {\r\n    if (\r\n      props.initialvalue[props.selected[0] * 9 + props.selected[1]] === null\r\n    ) {\r\n      // == it doesnt care about the datatypes, === it checks the datatypes too\r\n      const tempCopy = [...props.numbValue];\r\n      tempCopy[props.selected[0] * 9 + props.selected[1]] = props.value;\r\n      props.setnumbValue(tempCopy);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"smallBox\" onClick={sudokuChange}>\r\n        {props.value}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChangeNumber;\r\n","import React, { Component } from \"react\";\r\nimport ChangeNumber from \"./ChangeNumber\";\r\n\r\n//no state, using hooks\r\n\r\nexport class SelectNumber extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"selectNro\">\r\n        {[...Array(9)].map((x, i) => (\r\n          <ChangeNumber\r\n            key={i}\r\n            value={i + 1}\r\n            numbValue={this.props.numbValue}\r\n            setnumbValue={this.props.setnumbValue}\r\n            selected={this.props.selected}\r\n            initialvalue={this.props.initialvalue}\r\n          /> //like calling a function in javascript example(one,two)\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SelectNumber;\r\n","import './App.css';\nimport CompleteBox from './components/CompleteBox'; //the default export that you use\nimport SelectNumber from './components/SelectNumber';\nimport { useState, useEffect } from 'react'; // for normal imports, for example always import the hooks from react - difference between class and function components\n//import NineBox from './components/NineBox'\n\nfunction App() {\n\n  const [initialvalue, setinitialvalue] = useState([\"1\", \"5\", null, null, \"8\", null, \"7\", null, \"4\", \"7\", \"8\", \"6\", null, \"5\", \"4\", null, null, null, null, null, \"9\", \"6\", null, null, \"1\", null, null, null, null, \"2\", null, \"1\", null, \"5\", \"7\", \"8\", \"5\", null, null, null, null, null, \"3\", null, null, null, null, null, null, null, \"3\", null, \"1\", \"2\", null, \"3\", null, null, null, \"1\", \"6\", null, null, null, \"6\", null, \"4\", null, \"5\", \"8\", \"3\", \"7\", \"9\", null, null, \"3\", null, null, null, \"5\", null]) //setnumbValue, the method, allows you to change the state\n  const [numbvalue, setnumbValue] = useState([\"1\", \"5\", null, null, \"8\", null, \"7\", null, \"4\", \"7\", \"8\", \"6\", null, \"5\", \"4\", null, null, null, null, null, \"9\", \"6\", null, null, \"1\", null, null, null, null, \"2\", null, \"1\", null, \"5\", \"7\", \"8\", \"5\", null, null, null, null, null, \"3\", null, null, null, null, null, null, null, \"3\", null, \"1\", \"2\", null, \"3\", null, null, null, \"1\", \"6\", null, null, null, \"6\", null, \"4\", null, \"5\", \"8\", \"3\", \"7\", \"9\", null, null, \"3\", null, null, null, \"5\", null]) //setnumbValue, the method, allows you to change the state\n  const [selected, setSelected] = useState(Array(2))\n\n  //console.log(selected)\n  //setnumbValue(numbValue)\n\n  const onclick = (row, column) => {\n    setSelected([row, column]) // sets the state \n    //console.log(this.state.selected)\n  };\n\n  const keyChange = (event) => {\n    //console.log(selected)\n    //console.log(event.key)\n    if (event.key === \"ArrowLeft\") {\n      if (selected[1] > 0) {\n        setSelected([selected[0], selected[1] - 1]) //1. row, 2. column \n      }\n    }\n    else if (event.key === \"ArrowRight\") {\n      if (selected[1] < 8) {\n        setSelected([selected[0], selected[1] + 1]) //we are first getting the first value with select[0] and with select [1] the value of column\n      }\n    }\n    else if (event.key === \"ArrowUp\") {\n      if (selected[0] > 0) {\n        setSelected([selected[0] - 1, selected[1]])\n      }\n    }\n    else if (event.key === \"ArrowDown\") {\n      if (selected[0] < 8) {\n        setSelected([selected[0] + 1, selected[1]])\n      }\n    }\n    else if (parseInt(event.key) > 0 && parseInt(event.key) < 10) {\n      console.log(event.key)\n      if (initialvalue[selected[0] * 9 + selected[1]] === null) { //array only understands the index of the elemnt \n        const temp = [...numbvalue]; //spreading numbValue into another array and storing it into temp\n        temp[selected[0] * 9 + selected[1]] = event.key;\n        setnumbValue(temp)\n      }\n    }\n  }\n\n  useEffect(() => { //will execute itself when the component is mounted\n    document.addEventListener(\"keydown\", keyChange)//first argument is the action, second argument is the function you want to execute when the event is triggered\n\n    return () => { // like a callback function \n      document.removeEventListener(\"keydown\", keyChange); //example if you are making a get/ajax request, whatever data we get as a return before storing it on a state \n    } // eslint-disable-next-line \n  }, [selected]) //only when it changes, the hook will be executed. It will only execute once, if it is left empty/ like componentdidmount\n\n  return (\n    <div className=\"App\">\n      <h1>Sudoku</h1>\n      <div className=\"centerAlign\">\n        <CompleteBox numbValue={numbvalue} initialvalue={initialvalue} selected={selected} changeSelected={onclick} />\n      </div>\n      <div className=\"centerAlign\">\n        <SelectNumber numbValue={numbvalue} selected={selected} setnumbValue={setnumbValue} initialvalue={initialvalue} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}